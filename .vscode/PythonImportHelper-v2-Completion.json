[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "BIGINT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BIGINT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "UnboundExecutionError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "PeopleTable",
        "importPath": "src.models.sqlite.entities.people",
        "description": "src.models.sqlite.entities.people",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.people",
        "documentation": {}
    },
    {
        "label": "PeopleTable",
        "importPath": "src.models.sqlite.entities.people",
        "description": "src.models.sqlite.entities.people",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.people",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities",
        "description": "src.models.sqlite.entities",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities",
        "description": "src.models.sqlite.entities",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.pets_repository",
        "description": "src.models.sqlite.interfaces.pets_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.pets_repository",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "UnifiedAlchemyMagicMock",
        "importPath": "mock_alchemy.mocking",
        "description": "mock_alchemy.mocking",
        "isExtraImport": true,
        "detail": "mock_alchemy.mocking",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "PersonCreatorController",
        "kind": 6,
        "importPath": "src.controllers.person_creator_controller",
        "description": "src.controllers.person_creator_controller",
        "peekOfCode": "class PersonCreatorController:\n    def __init__(self, people_repository: PeopleRepositoryInterface) -> None:\n        self.__people_repository = people_repository\n    def create(self, person_info: dict) -> dict:\n        first_name = person_info[\"first_name\"]\n        last_name = person_info[\"last_name\"]\n        age = person_info[\"age\"]\n        pet_id = person_info[\"pet_id\"]\n        self.__validate_first_and_last_name(first_name, last_name)\n        self.__insert_person_in_db(first_name, last_name, age, pet_id)",
        "detail": "src.controllers.person_creator_controller",
        "documentation": {}
    },
    {
        "label": "MockPeopleRepository",
        "kind": 6,
        "importPath": "src.controllers.person_creator_controller_test",
        "description": "src.controllers.person_creator_controller_test",
        "peekOfCode": "class MockPeopleRepository(PeopleRepositoryInterface):\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None:\n        pass\n    def get_person(self, person_id: int) -> Any:\n        return None\ndef test_create():\n    person_info = {\n        \"first_name\": \"Fulano\",",
        "detail": "src.controllers.person_creator_controller_test",
        "documentation": {}
    },
    {
        "label": "test_create",
        "kind": 2,
        "importPath": "src.controllers.person_creator_controller_test",
        "description": "src.controllers.person_creator_controller_test",
        "peekOfCode": "def test_create():\n    person_info = {\n        \"first_name\": \"Fulano\",\n        \"last_name\": \"de Tal\",\n        \"age\": 30,\n        \"pet_id\": 123,\n    }\n    controller = PersonCreatorController(MockPeopleRepository())\n    response = controller.create(person_info)\n    assert response[\"data\"][\"type\"] == \"Person\"",
        "detail": "src.controllers.person_creator_controller_test",
        "documentation": {}
    },
    {
        "label": "test_create_error",
        "kind": 2,
        "importPath": "src.controllers.person_creator_controller_test",
        "description": "src.controllers.person_creator_controller_test",
        "peekOfCode": "def test_create_error():\n    person_info = {\n        \"first_name\": \"Fulano123\",\n        \"last_name\": \"de Tal\",\n        \"age\": 30,\n        \"pet_id\": 123,\n    }\n    controller = PersonCreatorController(MockPeopleRepository())\n    with pytest.raises(Exception) as exc:\n        controller.create(person_info)",
        "detail": "src.controllers.person_creator_controller_test",
        "documentation": {}
    },
    {
        "label": "PeopleTable",
        "kind": 6,
        "importPath": "src.models.sqlite.entities.people",
        "description": "src.models.sqlite.entities.people",
        "peekOfCode": "class PeopleTable(Base):\n    __tablename__ = \"people\"\n    id: Mapped[int] = mapped_column(BIGINT, primary_key=True)\n    first_name: Mapped[str] = mapped_column(String, nullable=False)\n    last_name: Mapped[str] = mapped_column(String, nullable=False)\n    age: Mapped[int] = mapped_column(BIGINT, nullable=False)\n    pet_id: Mapped[int] = mapped_column(ForeignKey(\"pets.id\"))\n    pet: Mapped[PetsTable] = relationship()\n    def __repr__(self):\n        return f\"People [name={self.first_name}, lastname={self.last_name}, pet_id={self.pet_id}]\"",
        "detail": "src.models.sqlite.entities.people",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "kind": 6,
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "peekOfCode": "class PetsTable(Base):\n    __tablename__ = \"pets\"\n    id: Mapped[int] = mapped_column(BIGINT, primary_key=True)\n    name: Mapped[str] = mapped_column(String, nullable=False)\n    type: Mapped[str] = mapped_column(String, nullable=False)\n    def __repr__(self):\n        return f\"Pets [name={self.name}], type={self.type}\"",
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "kind": 6,
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "peekOfCode": "class PeopleRepositoryInterface(ABC):\n    @abstractmethod\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None: ...\n    @abstractmethod\n    def get_person(self, person_id: int) -> Any: ...",
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "kind": 6,
        "importPath": "src.models.sqlite.interfaces.pets_repository",
        "description": "src.models.sqlite.interfaces.pets_repository",
        "peekOfCode": "class PetsRepositoryInterface(ABC):\n    @abstractmethod\n    def list_pets(self) -> list[PetsTable]: ...\n    @abstractmethod\n    def delete_pet(self, name: str) -> None: ...",
        "detail": "src.models.sqlite.interfaces.pets_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepository",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.people_repository",
        "description": "src.models.sqlite.repositories.people_repository",
        "peekOfCode": "class PeopleRepository(PeopleRepositoryInterface):\n    def __init__(self, db_connection: DBConnectionHandler) -> None:\n        self.db_connection = db_connection\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None:\n        with self.db_connection as database:\n            try:\n                person_data = PeopleTable(\n                    first_name=first_name, last_name=last_name, age=age, pet_id=pet_id",
        "detail": "src.models.sqlite.repositories.people_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepository",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.pets_repository",
        "description": "src.models.sqlite.repositories.pets_repository",
        "peekOfCode": "class PetsRepository(PetsRepositoryInterface):\n    def __init__(self, db_connection: DBConnectionHandler) -> None:\n        self.__db_connection = db_connection\n    def list_pets(self) -> List[PetsTable]:\n        with self.__db_connection as database:\n            try:\n                pets = database.session.query(PetsTable).all()\n                return pets\n            except UnboundExecutionError as exc:\n                print(str(exc))",
        "detail": "src.models.sqlite.repositories.pets_repository",
        "documentation": {}
    },
    {
        "label": "MockConnection",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "class MockConnection(DBConnectionHandler):\n    def __init__(self) -> None:\n        super().__init__()\n        self.session = UnifiedAlchemyMagicMock(\n            data=[\n                (\n                    [mock.call.query(PetsTable)],\n                    [\n                        PetsTable(name=\"dog\", type=\"dog\"),\n                        PetsTable(name=\"cat\", type=\"cat\"),",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "MockConnectionNoResult",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "class MockConnectionNoResult(DBConnectionHandler):\n    def __init__(self) -> None:\n        super().__init__()\n        self.session = UnifiedAlchemyMagicMock()\n        self.session.query.side_effect = self.__raise_no_result_found\n    def __raise_no_result_found(self, *args, **kwargs) -> None:\n        raise Exception(\"No result found\")\n    @property\n    def session_mock(self) -> UnifiedAlchemyMagicMock:\n        if not isinstance(self.session, UnifiedAlchemyMagicMock):",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_list_pets():\n    mock_connection = MockConnection()\n    repo = PetsRepository(mock_connection)\n    response = repo.list_pets()\n    mock_connection.session_mock.query.assert_called_once_with(PetsTable)\n    mock_connection.session_mock.all.assert_called_once()\n    mock_connection.session_mock.filter.assert_not_called()\n    assert response[0].name == \"dog\"\ndef test_delete_pet():\n    pet_name = \"pet_name\"",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_delete_pet",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_delete_pet():\n    pet_name = \"pet_name\"\n    mock_connection = MockConnection()\n    repo = PetsRepository(mock_connection)\n    repo.delete_pet(pet_name)\n    mock_connection.session_mock.query.assert_called_once_with(PetsTable)\n    mock_connection.session_mock.filter.assert_called_once_with(\n        PetsTable.name == pet_name\n    )\n    mock_connection.session_mock.delete.assert_called_once()",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets_no_results",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_list_pets_no_results():\n    mock_connection = MockConnectionNoResult()\n    repo = PetsRepository(mock_connection)\n    with pytest.raises(Exception) as exc:\n        response = repo.list_pets()\n        assert response == []\n    assert str(exc.value) == \"No result found\"\ndef test_delete_pet_error():\n    pet_name = \"pet_name\"\n    mock_connection = cast(UnifiedAlchemyMagicMock, MockConnectionNoResult())",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_delete_pet_error",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_delete_pet_error():\n    pet_name = \"pet_name\"\n    mock_connection = cast(UnifiedAlchemyMagicMock, MockConnectionNoResult())\n    repo = PetsRepository(mock_connection)\n    with pytest.raises(Exception) as exc:\n        repo.delete_pet(pet_name)\n    assert str(exc.value) == \"No result found\"\n    mock_connection.session.rollback.assert_called_once()",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_list_pets():\n    repo = PetsRepository(db_connection_handler)\n    response = repo.list_pets()\n    print(response)\n@pytest.mark.skip(reason=\"Interação com o banco\")\ndef test_delete_pet():\n    name = \"belinha\"\n    repo = PetsRepository(db_connection_handler)\n    repo.delete_pet(name)\n@pytest.mark.skip(reason=\"Interação com o banco\")",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "test_delete_pet",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_delete_pet():\n    name = \"belinha\"\n    repo = PetsRepository(db_connection_handler)\n    repo.delete_pet(name)\n@pytest.mark.skip(reason=\"Interação com o banco\")\ndef test_insert_person():\n    first_name = \"test name\"\n    last_name = \"test last\"\n    age = 77\n    pet_id = 2",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "test_insert_person",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_insert_person():\n    first_name = \"test name\"\n    last_name = \"test last\"\n    age = 77\n    pet_id = 2\n    repo = PeopleRepository(db_connection_handler)\n    repo.insert_person(first_name, last_name, age, pet_id)\n@pytest.mark.skip(reason=\"Interação com o banco\")\ndef test_get_person():\n    person_id = 1",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "test_get_person",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_get_person():\n    person_id = 1\n    repo = PeopleRepository(db_connection_handler)\n    response = repo.get_person(person_id)\n    print()\n    print(response)",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "kind": 6,
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "peekOfCode": "class DBConnectionHandler(ConnectionHandlerInterface):\n    def __init__(self) -> None:\n        self.__connection_string = \"sqlite:///storage.db\"\n        self.__engine = None\n        self.__session = None\n    def connect_to_db(self):\n        self.__engine = create_engine(self.__connection_string)\n    @property\n    def engine(self) -> Engine | None:\n        return self.__engine",
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "kind": 5,
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "peekOfCode": "db_connection_handler = DBConnectionHandler()",
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "ConnectionHandlerInterface",
        "kind": 6,
        "importPath": "src.models.sqlite.settings.connection_handler_interface",
        "description": "src.models.sqlite.settings.connection_handler_interface",
        "peekOfCode": "class ConnectionHandlerInterface(ABC):\n    pass",
        "detail": "src.models.sqlite.settings.connection_handler_interface",
        "documentation": {}
    },
    {
        "label": "test_connect_to_db",
        "kind": 2,
        "importPath": "src.models.sqlite.settings.connection_test",
        "description": "src.models.sqlite.settings.connection_test",
        "peekOfCode": "def test_connect_to_db():\n    assert db_connection_handler.engine is None\n    db_connection_handler.connect_to_db()\n    db_engine = db_connection_handler.engine\n    assert db_engine is not None\n    assert isinstance(db_engine, Engine)",
        "detail": "src.models.sqlite.settings.connection_test",
        "documentation": {}
    },
    {
        "label": "AlgumaCoisa",
        "kind": 6,
        "importPath": "case",
        "description": "case",
        "peekOfCode": "class AlgumaCoisa:\n    def __enter__(self):\n        print(\"Estou entrando\")\n    def __exit__(self, exc_type, exc_val, exec_tb):\n        print(exc_type)\n        print(exc_val)\n        print(exec_tb)\n        print(\"Estou Saindo\")\nwith AlgumaCoisa() as something:\n    # raise Exception(\"Erro ocorreu\")",
        "detail": "case",
        "documentation": {}
    }
]