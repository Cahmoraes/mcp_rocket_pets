[
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "PersonCreatorControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "PetListerControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "PersonCreatorControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "PetDeleterControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "PersonFinderControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "PetDeleterControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "PetListerControllerInterface",
        "importPath": "src.controllers.interfaces",
        "description": "src.controllers.interfaces",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "importPath": "src.errors.error_types",
        "description": "src.errors.error_types",
        "isExtraImport": true,
        "detail": "src.errors.error_types",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "importPath": "src.errors.error_types",
        "description": "src.errors.error_types",
        "isExtraImport": true,
        "detail": "src.errors.error_types",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces",
        "description": "src.models.sqlite.interfaces",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces",
        "description": "src.models.sqlite.interfaces",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces",
        "description": "src.models.sqlite.interfaces",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces",
        "description": "src.models.sqlite.interfaces",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PersonFinderControllerInterface",
        "importPath": "src.controllers.interfaces.person_finder_controller",
        "description": "src.controllers.interfaces.person_finder_controller",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces.person_finder_controller",
        "documentation": {}
    },
    {
        "label": "PetDeleterControllerInterface",
        "importPath": "src.controllers.interfaces.pet_deleter_controller",
        "description": "src.controllers.interfaces.pet_deleter_controller",
        "isExtraImport": true,
        "detail": "src.controllers.interfaces.pet_deleter_controller",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.pets_repository",
        "description": "src.models.sqlite.interfaces.pets_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.pets_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.pets_repository",
        "description": "src.models.sqlite.interfaces.pets_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.pets_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "importPath": "src.models.sqlite.interfaces.pets_repository",
        "description": "src.models.sqlite.interfaces.pets_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.interfaces.pets_repository",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PersonCreatorController",
        "importPath": "src.controllers.person_creator_controller",
        "description": "src.controllers.person_creator_controller",
        "isExtraImport": true,
        "detail": "src.controllers.person_creator_controller",
        "documentation": {}
    },
    {
        "label": "PeopleRepository",
        "importPath": "src.models.sqlite.repositories.people_repository",
        "description": "src.models.sqlite.repositories.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.repositories.people_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepository",
        "importPath": "src.models.sqlite.repositories.people_repository",
        "description": "src.models.sqlite.repositories.people_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.repositories.people_repository",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "PersonCreatorView",
        "importPath": "src.views.person_creator_view",
        "description": "src.views.person_creator_view",
        "isExtraImport": true,
        "detail": "src.views.person_creator_view",
        "documentation": {}
    },
    {
        "label": "PersonFinderController",
        "importPath": "src.controllers.person_finder_controller",
        "description": "src.controllers.person_finder_controller",
        "isExtraImport": true,
        "detail": "src.controllers.person_finder_controller",
        "documentation": {}
    },
    {
        "label": "PersonFinderView",
        "importPath": "src.views.person_finder_view",
        "description": "src.views.person_finder_view",
        "isExtraImport": true,
        "detail": "src.views.person_finder_view",
        "documentation": {}
    },
    {
        "label": "PetDeleterController",
        "importPath": "src.controllers.pet_deleter_controller",
        "description": "src.controllers.pet_deleter_controller",
        "isExtraImport": true,
        "detail": "src.controllers.pet_deleter_controller",
        "documentation": {}
    },
    {
        "label": "PetsRepository",
        "importPath": "src.models.sqlite.repositories.pets_repository",
        "description": "src.models.sqlite.repositories.pets_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.repositories.pets_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepository",
        "importPath": "src.models.sqlite.repositories.pets_repository",
        "description": "src.models.sqlite.repositories.pets_repository",
        "isExtraImport": true,
        "detail": "src.models.sqlite.repositories.pets_repository",
        "documentation": {}
    },
    {
        "label": "PetDeleterView",
        "importPath": "src.views.pet_deleter_view",
        "description": "src.views.pet_deleter_view",
        "isExtraImport": true,
        "detail": "src.views.pet_deleter_view",
        "documentation": {}
    },
    {
        "label": "PetListController",
        "importPath": "src.controllers.pet_lister_controller",
        "description": "src.controllers.pet_lister_controller",
        "isExtraImport": true,
        "detail": "src.controllers.pet_lister_controller",
        "documentation": {}
    },
    {
        "label": "PetListerView",
        "importPath": "src.views.pet_lister_view",
        "description": "src.views.pet_lister_view",
        "isExtraImport": true,
        "detail": "src.views.pet_lister_view",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "person_creator_composer",
        "importPath": "src.main.composer.person_creator_composer",
        "description": "src.main.composer.person_creator_composer",
        "isExtraImport": true,
        "detail": "src.main.composer.person_creator_composer",
        "documentation": {}
    },
    {
        "label": "person_finder_composer",
        "importPath": "src.main.composer.person_finder_composer",
        "description": "src.main.composer.person_finder_composer",
        "isExtraImport": true,
        "detail": "src.main.composer.person_finder_composer",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.http_types",
        "description": "src.views.http_types",
        "isExtraImport": true,
        "detail": "src.views.http_types",
        "documentation": {}
    },
    {
        "label": "pet_deleter_composer",
        "importPath": "src.main.composer.pet_deleter_composer",
        "description": "src.main.composer.pet_deleter_composer",
        "isExtraImport": true,
        "detail": "src.main.composer.pet_deleter_composer",
        "documentation": {}
    },
    {
        "label": "pet_lister_composer",
        "importPath": "src.main.composer.pet_lister_composer",
        "description": "src.main.composer.pet_lister_composer",
        "isExtraImport": true,
        "detail": "src.main.composer.pet_lister_composer",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.http_types.http_request",
        "description": "src.views.http_types.http_request",
        "isExtraImport": true,
        "detail": "src.views.http_types.http_request",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "person_route_pb",
        "importPath": "src.main.routes.person_routes",
        "description": "src.main.routes.person_routes",
        "isExtraImport": true,
        "detail": "src.main.routes.person_routes",
        "documentation": {}
    },
    {
        "label": "pet_route_pb",
        "importPath": "src.main.routes.pets_routes",
        "description": "src.main.routes.pets_routes",
        "isExtraImport": true,
        "detail": "src.main.routes.pets_routes",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "BIGINT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BIGINT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "isExtraImport": true,
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "UnboundExecutionError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "PeopleTable",
        "importPath": "src.models.sqlite.entities.people",
        "description": "src.models.sqlite.entities.people",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.people",
        "documentation": {}
    },
    {
        "label": "PeopleTable",
        "importPath": "src.models.sqlite.entities.people",
        "description": "src.models.sqlite.entities.people",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities.people",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities",
        "description": "src.models.sqlite.entities",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "importPath": "src.models.sqlite.entities",
        "description": "src.models.sqlite.entities",
        "isExtraImport": true,
        "detail": "src.models.sqlite.entities",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "UnifiedAlchemyMagicMock",
        "importPath": "mock_alchemy.mocking",
        "description": "mock_alchemy.mocking",
        "isExtraImport": true,
        "detail": "mock_alchemy.mocking",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "ViewInterface",
        "importPath": "src.views.interfaces.view_interface",
        "description": "src.views.interfaces.view_interface",
        "isExtraImport": true,
        "detail": "src.views.interfaces.view_interface",
        "documentation": {}
    },
    {
        "label": "ViewInterface",
        "importPath": "src.views.interfaces.view_interface",
        "description": "src.views.interfaces.view_interface",
        "isExtraImport": true,
        "detail": "src.views.interfaces.view_interface",
        "documentation": {}
    },
    {
        "label": "ViewInterface",
        "importPath": "src.views.interfaces.view_interface",
        "description": "src.views.interfaces.view_interface",
        "isExtraImport": true,
        "detail": "src.views.interfaces.view_interface",
        "documentation": {}
    },
    {
        "label": "ViewInterface",
        "importPath": "src.views.interfaces.view_interface",
        "description": "src.views.interfaces.view_interface",
        "isExtraImport": true,
        "detail": "src.views.interfaces.view_interface",
        "documentation": {}
    },
    {
        "label": "ViewInterface",
        "importPath": "src.views.interfaces.view_interface",
        "description": "src.views.interfaces.view_interface",
        "isExtraImport": true,
        "detail": "src.views.interfaces.view_interface",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.main.server.server",
        "description": "src.main.server.server",
        "isExtraImport": true,
        "detail": "src.main.server.server",
        "documentation": {}
    },
    {
        "label": "PersonCreatorControllerInterface",
        "kind": 6,
        "importPath": "src.controllers.interfaces.person_creator_controller",
        "description": "src.controllers.interfaces.person_creator_controller",
        "peekOfCode": "class PersonCreatorControllerInterface(ABC):\n    @abstractmethod\n    def create(self, person_info: dict) -> dict: ...",
        "detail": "src.controllers.interfaces.person_creator_controller",
        "documentation": {}
    },
    {
        "label": "PersonFinderControllerInterface",
        "kind": 6,
        "importPath": "src.controllers.interfaces.person_finder_controller",
        "description": "src.controllers.interfaces.person_finder_controller",
        "peekOfCode": "class PersonFinderControllerInterface(ABC):\n    @abstractmethod\n    def find(self, person_id: int) -> dict: ...",
        "detail": "src.controllers.interfaces.person_finder_controller",
        "documentation": {}
    },
    {
        "label": "PetDeleterControllerInterface",
        "kind": 6,
        "importPath": "src.controllers.interfaces.pet_deleter_controller",
        "description": "src.controllers.interfaces.pet_deleter_controller",
        "peekOfCode": "class PetDeleterControllerInterface(ABC):\n    @abstractmethod\n    def delete(self, name: str) -> None: ...",
        "detail": "src.controllers.interfaces.pet_deleter_controller",
        "documentation": {}
    },
    {
        "label": "PetListerControllerInterface",
        "kind": 6,
        "importPath": "src.controllers.interfaces.pet_lister_controller",
        "description": "src.controllers.interfaces.pet_lister_controller",
        "peekOfCode": "class PetListerControllerInterface(ABC):\n    @abstractmethod\n    def list(self) -> dict: ...",
        "detail": "src.controllers.interfaces.pet_lister_controller",
        "documentation": {}
    },
    {
        "label": "PersonCreatorController",
        "kind": 6,
        "importPath": "src.controllers.person_creator_controller",
        "description": "src.controllers.person_creator_controller",
        "peekOfCode": "class PersonCreatorController(PersonCreatorControllerInterface):\n    def __init__(self, people_repository: PeopleRepositoryInterface) -> None:\n        self.__people_repository = people_repository\n    def create(self, person_info: dict) -> dict:\n        first_name = person_info[\"first_name\"]\n        last_name = person_info[\"last_name\"]\n        age = person_info[\"age\"]\n        pet_id = person_info[\"pet_id\"]\n        self.__validate_first_and_last_name(first_name, last_name)\n        self.__insert_person_in_db(first_name, last_name, age, pet_id)",
        "detail": "src.controllers.person_creator_controller",
        "documentation": {}
    },
    {
        "label": "MockPeopleRepository",
        "kind": 6,
        "importPath": "src.controllers.person_creator_controller_test",
        "description": "src.controllers.person_creator_controller_test",
        "peekOfCode": "class MockPeopleRepository(PeopleRepositoryInterface):\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None:\n        pass\n    def get_person(self, person_id: int) -> Any:\n        return None\ndef test_create():\n    person_info = {\n        \"first_name\": \"Fulano\",",
        "detail": "src.controllers.person_creator_controller_test",
        "documentation": {}
    },
    {
        "label": "test_create",
        "kind": 2,
        "importPath": "src.controllers.person_creator_controller_test",
        "description": "src.controllers.person_creator_controller_test",
        "peekOfCode": "def test_create():\n    person_info = {\n        \"first_name\": \"Fulano\",\n        \"last_name\": \"de Tal\",\n        \"age\": 30,\n        \"pet_id\": 123,\n    }\n    controller = PersonCreatorController(MockPeopleRepository())\n    response = controller.create(person_info)\n    assert response[\"data\"][\"type\"] == \"Person\"",
        "detail": "src.controllers.person_creator_controller_test",
        "documentation": {}
    },
    {
        "label": "test_create_error",
        "kind": 2,
        "importPath": "src.controllers.person_creator_controller_test",
        "description": "src.controllers.person_creator_controller_test",
        "peekOfCode": "def test_create_error():\n    person_info = {\n        \"first_name\": \"Fulano123\",\n        \"last_name\": \"de Tal\",\n        \"age\": 30,\n        \"pet_id\": 123,\n    }\n    controller = PersonCreatorController(MockPeopleRepository())\n    with pytest.raises(Exception) as exc:\n        controller.create(person_info)",
        "detail": "src.controllers.person_creator_controller_test",
        "documentation": {}
    },
    {
        "label": "PersonFinderController",
        "kind": 6,
        "importPath": "src.controllers.person_finder_controller",
        "description": "src.controllers.person_finder_controller",
        "peekOfCode": "class PersonFinderController(PersonFinderControllerInterface):\n    def __init__(self, people_repository: PeopleRepositoryInterface) -> None:\n        self.__people_repository = people_repository\n    def find(self, person_id: int) -> dict:\n        person = self.__find_person_in_db(person_id)\n        return self.__format_response(person)\n    def __find_person_in_db(self, person_id: int) -> Any:\n        person = self.__people_repository.get_person(person_id)\n        if not person:\n            raise HttpNotFoundError(\"Pessoa não encontrada\")",
        "detail": "src.controllers.person_finder_controller",
        "documentation": {}
    },
    {
        "label": "MockPerson",
        "kind": 6,
        "importPath": "src.controllers.person_finder_controller_test",
        "description": "src.controllers.person_finder_controller_test",
        "peekOfCode": "class MockPerson(TypedDict):\n    first_name: str\n    last_name: str\n    pet_name: str\n    pet_type: str\nclass MockRepository(PeopleRepositoryInterface):\n    def get_person(self, person_id: int) -> Any:\n        return MockPerson(\n            first_name=\"John\", last_name=\"Doe\", pet_name=\"Fluffy\", pet_type=\"cat\"\n        )",
        "detail": "src.controllers.person_finder_controller_test",
        "documentation": {}
    },
    {
        "label": "MockRepository",
        "kind": 6,
        "importPath": "src.controllers.person_finder_controller_test",
        "description": "src.controllers.person_finder_controller_test",
        "peekOfCode": "class MockRepository(PeopleRepositoryInterface):\n    def get_person(self, person_id: int) -> Any:\n        return MockPerson(\n            first_name=\"John\", last_name=\"Doe\", pet_name=\"Fluffy\", pet_type=\"cat\"\n        )\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None:\n        return\ndef test_find():",
        "detail": "src.controllers.person_finder_controller_test",
        "documentation": {}
    },
    {
        "label": "test_find",
        "kind": 2,
        "importPath": "src.controllers.person_finder_controller_test",
        "description": "src.controllers.person_finder_controller_test",
        "peekOfCode": "def test_find():\n    controller = PersonFinderController(MockRepository())\n    response = controller.find(person_id=123)\n    expected_response = {\n        \"data\": {\n            \"type\": \"Person\",\n            \"count\": 1,\n            \"attributes\": {\n                \"first_name\": \"John\",\n                \"last_name\": \"Doe\",",
        "detail": "src.controllers.person_finder_controller_test",
        "documentation": {}
    },
    {
        "label": "PetDeleterController",
        "kind": 6,
        "importPath": "src.controllers.pet_deleter_controller",
        "description": "src.controllers.pet_deleter_controller",
        "peekOfCode": "class PetDeleterController(PetDeleterControllerInterface):\n    def __init__(self, pet_repository: PetsRepositoryInterface) -> None:\n        self.__pet_repository = pet_repository\n    def delete(self, name: str) -> None:\n        self.__pet_repository.delete_pet(name)",
        "detail": "src.controllers.pet_deleter_controller",
        "documentation": {}
    },
    {
        "label": "test_delete_pet",
        "kind": 2,
        "importPath": "src.controllers.pet_deleter_controller_test",
        "description": "src.controllers.pet_deleter_controller_test",
        "peekOfCode": "def test_delete_pet():\n    mock_repository: PetsRepositoryInterface = Mock(spec=PetsRepositoryInterface)\n    controller = PetDeleterController(mock_repository)\n    controller.delete(\"amiguinho\")\n    mock_repository.delete_pet.assert_called_once_with(\"amiguinho\")",
        "detail": "src.controllers.pet_deleter_controller_test",
        "documentation": {}
    },
    {
        "label": "PetListController",
        "kind": 6,
        "importPath": "src.controllers.pet_lister_controller",
        "description": "src.controllers.pet_lister_controller",
        "peekOfCode": "class PetListController(PetListerControllerInterface):\n    def __init__(self, pet_repository: PetsRepositoryInterface) -> None:\n        self.__pet_repository = pet_repository\n    def list(self) -> dict:\n        pets = self.__pets_in_db()\n        return self.__format_response(pets)\n    def __pets_in_db(self) -> List[PetsTable]:\n        return self.__pet_repository.list_pets()\n    def __format_response(self, pets: List[PetsTable]) -> dict:\n        formatted_pets = []",
        "detail": "src.controllers.pet_lister_controller",
        "documentation": {}
    },
    {
        "label": "MockPetsRepository",
        "kind": 6,
        "importPath": "src.controllers.pet_lister_controller_test",
        "description": "src.controllers.pet_lister_controller_test",
        "peekOfCode": "class MockPetsRepository(PetsRepositoryInterface):\n    def list_pets(self) -> list[PetsTable]:\n        return [\n            PetsTable(name=\"Fluffy\", type=\"Cat\", id=4),\n            PetsTable(name=\"Buddy\", type=\"Dog\", id=47),\n        ]\n    def delete_pet(self, name: str) -> None: ...\ndef test_list_pets():\n    controller = PetListController(MockPetsRepository())\n    response = controller.list()",
        "detail": "src.controllers.pet_lister_controller_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets",
        "kind": 2,
        "importPath": "src.controllers.pet_lister_controller_test",
        "description": "src.controllers.pet_lister_controller_test",
        "peekOfCode": "def test_list_pets():\n    controller = PetListController(MockPetsRepository())\n    response = controller.list()\n    expected_response = {\n        \"data\": {\n            \"type\": \"Pets\",\n            \"count\": 2,\n            \"attributes\": [{\"name\": \"Fluffy\", \"id\": 4}, {\"name\": \"Buddy\", \"id\": 47}],\n        }\n    }",
        "detail": "src.controllers.pet_lister_controller_test",
        "documentation": {}
    },
    {
        "label": "HttpBadRequestError",
        "kind": 6,
        "importPath": "src.errors.error_types.http_bad_request",
        "description": "src.errors.error_types.http_bad_request",
        "peekOfCode": "class HttpBadRequestError(Exception):\n    def __init__(self, message: str) -> None:\n        super().__init__(message)\n        self.status_code = 400\n        self.name = \"BadRequest\"\n        self.message = message",
        "detail": "src.errors.error_types.http_bad_request",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "kind": 6,
        "importPath": "src.errors.error_types.http_not_found",
        "description": "src.errors.error_types.http_not_found",
        "peekOfCode": "class HttpNotFoundError(Exception):\n    def __init__(self, message: str) -> None:\n        super().__init__(message)\n        self.status_code = 404\n        self.name = \"NotFound\"\n        self.message = message",
        "detail": "src.errors.error_types.http_not_found",
        "documentation": {}
    },
    {
        "label": "HttpUnprocessableEntityError",
        "kind": 6,
        "importPath": "src.errors.error_types.http_unprocessable_entity",
        "description": "src.errors.error_types.http_unprocessable_entity",
        "peekOfCode": "class HttpUnprocessableEntityError(Exception):\n    def __init__(self, message: str) -> None:\n        super().__init__(message)\n        self.status_code = 422\n        self.name = \"UnprocessableEntity\"\n        self.message = message",
        "detail": "src.errors.error_types.http_unprocessable_entity",
        "documentation": {}
    },
    {
        "label": "person_creator_composer",
        "kind": 2,
        "importPath": "src.main.composer.person_creator_composer",
        "description": "src.main.composer.person_creator_composer",
        "peekOfCode": "def person_creator_composer():\n    model = PeopleRepository(db_connection_handler)\n    controller = PersonCreatorController(model)\n    return PersonCreatorView(controller)",
        "detail": "src.main.composer.person_creator_composer",
        "documentation": {}
    },
    {
        "label": "person_finder_composer",
        "kind": 2,
        "importPath": "src.main.composer.person_finder_composer",
        "description": "src.main.composer.person_finder_composer",
        "peekOfCode": "def person_finder_composer():\n    model = PeopleRepository(db_connection_handler)\n    controller = PersonFinderController(model)\n    return PersonFinderView(controller)",
        "detail": "src.main.composer.person_finder_composer",
        "documentation": {}
    },
    {
        "label": "pet_deleter_composer",
        "kind": 2,
        "importPath": "src.main.composer.pet_deleter_composer",
        "description": "src.main.composer.pet_deleter_composer",
        "peekOfCode": "def pet_deleter_composer():\n    model = PetsRepository(db_connection_handler)\n    controller = PetDeleterController(model)\n    return PetDeleterView(controller)",
        "detail": "src.main.composer.pet_deleter_composer",
        "documentation": {}
    },
    {
        "label": "pet_lister_composer",
        "kind": 2,
        "importPath": "src.main.composer.pet_lister_composer",
        "description": "src.main.composer.pet_lister_composer",
        "peekOfCode": "def pet_lister_composer():\n    model = PetsRepository(db_connection_handler)\n    controller = PetListController(model)\n    return PetListerView(controller)",
        "detail": "src.main.composer.pet_lister_composer",
        "documentation": {}
    },
    {
        "label": "create_person",
        "kind": 2,
        "importPath": "src.main.routes.person_routes",
        "description": "src.main.routes.person_routes",
        "peekOfCode": "def create_person():\n    http_request = HttpRequest(request.json)\n    view = person_creator_composer()\n    http_response = view.handle(http_request)\n    return jsonify(http_response.body), http_response.status_code\n@person_route_pb.route(\"/people/<int:person_id>\", methods=[\"GET\"])\ndef find_person(person_id: int):\n    http_request = HttpRequest(param={\"person_id\": person_id})\n    view = person_finder_composer()\n    http_response = view.handle(http_request)",
        "detail": "src.main.routes.person_routes",
        "documentation": {}
    },
    {
        "label": "find_person",
        "kind": 2,
        "importPath": "src.main.routes.person_routes",
        "description": "src.main.routes.person_routes",
        "peekOfCode": "def find_person(person_id: int):\n    http_request = HttpRequest(param={\"person_id\": person_id})\n    view = person_finder_composer()\n    http_response = view.handle(http_request)\n    return jsonify(http_response.body), http_response.status_code",
        "detail": "src.main.routes.person_routes",
        "documentation": {}
    },
    {
        "label": "person_route_pb",
        "kind": 5,
        "importPath": "src.main.routes.person_routes",
        "description": "src.main.routes.person_routes",
        "peekOfCode": "person_route_pb = Blueprint(\"person_routes\", __name__)\n@person_route_pb.route(\"/person\", methods=[\"POST\"])\ndef create_person():\n    http_request = HttpRequest(request.json)\n    view = person_creator_composer()\n    http_response = view.handle(http_request)\n    return jsonify(http_response.body), http_response.status_code\n@person_route_pb.route(\"/people/<int:person_id>\", methods=[\"GET\"])\ndef find_person(person_id: int):\n    http_request = HttpRequest(param={\"person_id\": person_id})",
        "detail": "src.main.routes.person_routes",
        "documentation": {}
    },
    {
        "label": "list_pets",
        "kind": 2,
        "importPath": "src.main.routes.pets_routes",
        "description": "src.main.routes.pets_routes",
        "peekOfCode": "def list_pets():\n    http_request = HttpRequest()\n    view = pet_lister_composer()\n    http_response = view.handle(http_request)\n    return jsonify(http_response.body), http_response.status_code\n@pet_route_pb.route(\"/pets/<name>\", methods=[\"DELETE\"])\ndef delete_pets(name: str):\n    http_request = HttpRequest(param={\"name\": name})\n    view = pet_deleter_composer()\n    http_response = view.handle(http_request)",
        "detail": "src.main.routes.pets_routes",
        "documentation": {}
    },
    {
        "label": "delete_pets",
        "kind": 2,
        "importPath": "src.main.routes.pets_routes",
        "description": "src.main.routes.pets_routes",
        "peekOfCode": "def delete_pets(name: str):\n    http_request = HttpRequest(param={\"name\": name})\n    view = pet_deleter_composer()\n    http_response = view.handle(http_request)\n    return jsonify(http_response.body), http_response.status_code",
        "detail": "src.main.routes.pets_routes",
        "documentation": {}
    },
    {
        "label": "pet_route_pb",
        "kind": 5,
        "importPath": "src.main.routes.pets_routes",
        "description": "src.main.routes.pets_routes",
        "peekOfCode": "pet_route_pb = Blueprint(\"pets_routes\", __name__)\n@pet_route_pb.route(\"/pets\", methods=[\"GET\"])\ndef list_pets():\n    http_request = HttpRequest()\n    view = pet_lister_composer()\n    http_response = view.handle(http_request)\n    return jsonify(http_response.body), http_response.status_code\n@pet_route_pb.route(\"/pets/<name>\", methods=[\"DELETE\"])\ndef delete_pets(name: str):\n    http_request = HttpRequest(param={\"name\": name})",
        "detail": "src.main.routes.pets_routes",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main.server.server",
        "description": "src.main.server.server",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.register_blueprint(pet_route_pb)\napp.register_blueprint(person_route_pb)",
        "detail": "src.main.server.server",
        "documentation": {}
    },
    {
        "label": "PeopleTable",
        "kind": 6,
        "importPath": "src.models.sqlite.entities.people",
        "description": "src.models.sqlite.entities.people",
        "peekOfCode": "class PeopleTable(Base):\n    __tablename__ = \"people\"\n    id: Mapped[int] = mapped_column(BIGINT, primary_key=True)\n    first_name: Mapped[str] = mapped_column(String, nullable=False)\n    last_name: Mapped[str] = mapped_column(String, nullable=False)\n    age: Mapped[int] = mapped_column(BIGINT, nullable=False)\n    pet_id: Mapped[int] = mapped_column(ForeignKey(\"pets.id\"))\n    pet: Mapped[PetsTable] = relationship()\n    def __repr__(self):\n        return f\"People [name={self.first_name}, lastname={self.last_name}, pet_id={self.pet_id}]\"",
        "detail": "src.models.sqlite.entities.people",
        "documentation": {}
    },
    {
        "label": "PetsTable",
        "kind": 6,
        "importPath": "src.models.sqlite.entities.pets",
        "description": "src.models.sqlite.entities.pets",
        "peekOfCode": "class PetsTable(Base):\n    __tablename__ = \"pets\"\n    id: Mapped[int] = mapped_column(BIGINT, primary_key=True)\n    name: Mapped[str] = mapped_column(String, nullable=False)\n    type: Mapped[str] = mapped_column(String, nullable=False)\n    def __repr__(self):\n        return f\"Pets [name={self.name}], type={self.type}\"",
        "detail": "src.models.sqlite.entities.pets",
        "documentation": {}
    },
    {
        "label": "PeopleRepositoryInterface",
        "kind": 6,
        "importPath": "src.models.sqlite.interfaces.people_repository",
        "description": "src.models.sqlite.interfaces.people_repository",
        "peekOfCode": "class PeopleRepositoryInterface(ABC):\n    @abstractmethod\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None: ...\n    @abstractmethod\n    def get_person(self, person_id: int) -> Any: ...",
        "detail": "src.models.sqlite.interfaces.people_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepositoryInterface",
        "kind": 6,
        "importPath": "src.models.sqlite.interfaces.pets_repository",
        "description": "src.models.sqlite.interfaces.pets_repository",
        "peekOfCode": "class PetsRepositoryInterface(ABC):\n    @abstractmethod\n    def list_pets(self) -> list[PetsTable]: ...\n    @abstractmethod\n    def delete_pet(self, name: str) -> None: ...",
        "detail": "src.models.sqlite.interfaces.pets_repository",
        "documentation": {}
    },
    {
        "label": "PeopleRepository",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.people_repository",
        "description": "src.models.sqlite.repositories.people_repository",
        "peekOfCode": "class PeopleRepository(PeopleRepositoryInterface):\n    def __init__(self, db_connection: DBConnectionHandler) -> None:\n        self.db_connection = db_connection\n    def insert_person(\n        self, first_name: str, last_name: str, age: int, pet_id: int\n    ) -> None:\n        with self.db_connection as database:\n            try:\n                person_data = PeopleTable(\n                    first_name=first_name, last_name=last_name, age=age, pet_id=pet_id",
        "detail": "src.models.sqlite.repositories.people_repository",
        "documentation": {}
    },
    {
        "label": "PetsRepository",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.pets_repository",
        "description": "src.models.sqlite.repositories.pets_repository",
        "peekOfCode": "class PetsRepository(PetsRepositoryInterface):\n    def __init__(self, db_connection: DBConnectionHandler) -> None:\n        self.__db_connection = db_connection\n    def list_pets(self) -> List[PetsTable]:\n        with self.__db_connection as database:\n            try:\n                pets = database.session.query(PetsTable).all()\n                return pets\n            except UnboundExecutionError as exc:\n                print(str(exc))",
        "detail": "src.models.sqlite.repositories.pets_repository",
        "documentation": {}
    },
    {
        "label": "MockConnection",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "class MockConnection(DBConnectionHandler):\n    def __init__(self) -> None:\n        super().__init__()\n        self.session = UnifiedAlchemyMagicMock(\n            data=[\n                (\n                    [mock.call.query(PetsTable)],\n                    [\n                        PetsTable(name=\"dog\", type=\"dog\"),\n                        PetsTable(name=\"cat\", type=\"cat\"),",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "MockConnectionNoResult",
        "kind": 6,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "class MockConnectionNoResult(DBConnectionHandler):\n    def __init__(self) -> None:\n        super().__init__()\n        self.session = UnifiedAlchemyMagicMock()\n        self.session.query.side_effect = self.__raise_no_result_found\n    def __raise_no_result_found(self, *args, **kwargs) -> None:\n        raise Exception(\"No result found\")\n    @property\n    def session_mock(self) -> UnifiedAlchemyMagicMock:\n        if not isinstance(self.session, UnifiedAlchemyMagicMock):",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_list_pets():\n    mock_connection = MockConnection()\n    repo = PetsRepository(mock_connection)\n    response = repo.list_pets()\n    mock_connection.session_mock.query.assert_called_once_with(PetsTable)\n    mock_connection.session_mock.all.assert_called_once()\n    mock_connection.session_mock.filter.assert_not_called()\n    assert response[0].name == \"dog\"\ndef test_delete_pet():\n    pet_name = \"pet_name\"",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_delete_pet",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_delete_pet():\n    pet_name = \"pet_name\"\n    mock_connection = MockConnection()\n    repo = PetsRepository(mock_connection)\n    repo.delete_pet(pet_name)\n    mock_connection.session_mock.query.assert_called_once_with(PetsTable)\n    mock_connection.session_mock.filter.assert_called_once_with(\n        PetsTable.name == pet_name\n    )\n    mock_connection.session_mock.delete.assert_called_once()",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets_no_results",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_list_pets_no_results():\n    mock_connection = MockConnectionNoResult()\n    repo = PetsRepository(mock_connection)\n    with pytest.raises(Exception) as exc:\n        response = repo.list_pets()\n        assert response == []\n    assert str(exc.value) == \"No result found\"\ndef test_delete_pet_error():\n    pet_name = \"pet_name\"\n    mock_connection = cast(UnifiedAlchemyMagicMock, MockConnectionNoResult())",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_delete_pet_error",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.pets_repository_test",
        "description": "src.models.sqlite.repositories.pets_repository_test",
        "peekOfCode": "def test_delete_pet_error():\n    pet_name = \"pet_name\"\n    mock_connection = cast(UnifiedAlchemyMagicMock, MockConnectionNoResult())\n    repo = PetsRepository(mock_connection)\n    with pytest.raises(Exception) as exc:\n        repo.delete_pet(pet_name)\n    assert str(exc.value) == \"No result found\"\n    mock_connection.session.rollback.assert_called_once()",
        "detail": "src.models.sqlite.repositories.pets_repository_test",
        "documentation": {}
    },
    {
        "label": "test_list_pets",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_list_pets():\n    repo = PetsRepository(db_connection_handler)\n    response = repo.list_pets()\n    print(response)\n@pytest.mark.skip(reason=\"Interação com o banco\")\ndef test_delete_pet():\n    name = \"belinha\"\n    repo = PetsRepository(db_connection_handler)\n    repo.delete_pet(name)\n@pytest.mark.skip(reason=\"Interação com o banco\")",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "test_delete_pet",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_delete_pet():\n    name = \"belinha\"\n    repo = PetsRepository(db_connection_handler)\n    repo.delete_pet(name)\n@pytest.mark.skip(reason=\"Interação com o banco\")\ndef test_insert_person():\n    first_name = \"test name\"\n    last_name = \"test last\"\n    age = 77\n    pet_id = 2",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "test_insert_person",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_insert_person():\n    first_name = \"test name\"\n    last_name = \"test last\"\n    age = 77\n    pet_id = 2\n    repo = PeopleRepository(db_connection_handler)\n    repo.insert_person(first_name, last_name, age, pet_id)\n@pytest.mark.skip(reason=\"Interação com o banco\")\ndef test_get_person():\n    person_id = 1",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "test_get_person",
        "kind": 2,
        "importPath": "src.models.sqlite.repositories.repositories_test",
        "description": "src.models.sqlite.repositories.repositories_test",
        "peekOfCode": "def test_get_person():\n    person_id = 1\n    repo = PeopleRepository(db_connection_handler)\n    response = repo.get_person(person_id)\n    print()\n    print(response)",
        "detail": "src.models.sqlite.repositories.repositories_test",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.models.sqlite.settings.base",
        "description": "src.models.sqlite.settings.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "src.models.sqlite.settings.base",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "kind": 6,
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "peekOfCode": "class DBConnectionHandler(ConnectionHandlerInterface):\n    def __init__(self) -> None:\n        self.__connection_string = \"sqlite:///storage.db\"\n        self.__engine = None\n        self.__session = None\n    def connect_to_db(self):\n        self.__engine = create_engine(self.__connection_string)\n    @property\n    def engine(self) -> Engine | None:\n        return self.__engine",
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "kind": 5,
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "peekOfCode": "db_connection_handler = DBConnectionHandler()",
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "ConnectionHandlerInterface",
        "kind": 6,
        "importPath": "src.models.sqlite.settings.connection_handler_interface",
        "description": "src.models.sqlite.settings.connection_handler_interface",
        "peekOfCode": "class ConnectionHandlerInterface(ABC):\n    pass",
        "detail": "src.models.sqlite.settings.connection_handler_interface",
        "documentation": {}
    },
    {
        "label": "test_connect_to_db",
        "kind": 2,
        "importPath": "src.models.sqlite.settings.connection_test",
        "description": "src.models.sqlite.settings.connection_test",
        "peekOfCode": "def test_connect_to_db():\n    assert db_connection_handler.engine is None\n    db_connection_handler.connect_to_db()\n    db_engine = db_connection_handler.engine\n    assert db_engine is not None\n    assert isinstance(db_engine, Engine)",
        "detail": "src.models.sqlite.settings.connection_test",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "kind": 6,
        "importPath": "src.views.http_types.http_request",
        "description": "src.views.http_types.http_request",
        "peekOfCode": "class HttpRequest:\n    def __init__(self, body: Body = None, param: Param = None) -> None:\n        self.body = body\n        self.param = param",
        "detail": "src.views.http_types.http_request",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "kind": 6,
        "importPath": "src.views.http_types.http_response",
        "description": "src.views.http_types.http_response",
        "peekOfCode": "class HttpResponse:\n    def __init__(self, status_code: int, body: Body = None) -> None:\n        self.status_code = status_code\n        self.body = body",
        "detail": "src.views.http_types.http_response",
        "documentation": {}
    },
    {
        "label": "ViewInterface",
        "kind": 6,
        "importPath": "src.views.interfaces.view_interface",
        "description": "src.views.interfaces.view_interface",
        "peekOfCode": "class ViewInterface(ABC):\n    @abstractmethod\n    def handle(self, http_request: HttpRequest) -> HttpResponse: ...",
        "detail": "src.views.interfaces.view_interface",
        "documentation": {}
    },
    {
        "label": "PersonCreatorView",
        "kind": 6,
        "importPath": "src.views.person_creator_view",
        "description": "src.views.person_creator_view",
        "peekOfCode": "class PersonCreatorView(ViewInterface):\n    def __init__(self, controller: PersonCreatorControllerInterface) -> None:\n        self.__controller = controller\n    def handle(self, http_request: HttpRequest) -> HttpResponse:\n        person_info = http_request.body\n        if not person_info:\n            raise Exception(\"Body inválido\")\n        body_response = self.__controller.create(person_info)\n        return HttpResponse(status_code=201, body=body_response)",
        "detail": "src.views.person_creator_view",
        "documentation": {}
    },
    {
        "label": "PersonDeleterView",
        "kind": 6,
        "importPath": "src.views.person_deleter_view",
        "description": "src.views.person_deleter_view",
        "peekOfCode": "class PersonDeleterView(ViewInterface):\n    def __init__(self, controller: PetDeleterControllerInterface) -> None:\n        self.__controller = controller\n    def handle(self, http_request: HttpRequest) -> HttpResponse:\n        if not http_request.body:\n            raise Exception(\"Body inválido\")\n        pet_name = http_request.body[\"name\"]\n        self.__controller.delete(pet_name)\n        return HttpResponse(status_code=204)",
        "detail": "src.views.person_deleter_view",
        "documentation": {}
    },
    {
        "label": "PersonFinderView",
        "kind": 6,
        "importPath": "src.views.person_finder_view",
        "description": "src.views.person_finder_view",
        "peekOfCode": "class PersonFinderView(ViewInterface):\n    def __init__(self, controller: PersonFinderControllerInterface) -> None:\n        self.__controller = controller\n    def handle(self, http_request: HttpRequest) -> HttpResponse:\n        if not http_request.param:\n            raise Exception(\"Parâmetro inválido\")\n        person_id = http_request.param.get(\"person_id\")\n        if not person_id or not isinstance(person_id, int):\n            raise Exception(\"Parâmetro inválido\")\n        body_response = self.__controller.find(person_id)",
        "detail": "src.views.person_finder_view",
        "documentation": {}
    },
    {
        "label": "PetDeleterView",
        "kind": 6,
        "importPath": "src.views.pet_deleter_view",
        "description": "src.views.pet_deleter_view",
        "peekOfCode": "class PetDeleterView(ViewInterface):\n    def __init__(self, controller: PetDeleterControllerInterface) -> None:\n        self.__controller = controller\n    def handle(self, http_request: HttpRequest) -> HttpResponse:\n        if not http_request.param:\n            raise Exception(\"Parâmetro inválido\")\n        name = http_request.param[\"name\"]\n        body_response = self.__controller.delete(name)\n        return HttpResponse(status_code=204, body=body_response)",
        "detail": "src.views.pet_deleter_view",
        "documentation": {}
    },
    {
        "label": "PetListerView",
        "kind": 6,
        "importPath": "src.views.pet_lister_view",
        "description": "src.views.pet_lister_view",
        "peekOfCode": "class PetListerView(ViewInterface):\n    def __init__(self, controller: PetListerControllerInterface) -> None:\n        self.__controller = controller\n    def handle(self, http_request: HttpRequest) -> HttpResponse:\n        body_response = self.__controller.list()\n        return HttpResponse(status_code=201, body=body_response)",
        "detail": "src.views.pet_lister_view",
        "documentation": {}
    },
    {
        "label": "AlgumaCoisa",
        "kind": 6,
        "importPath": "case",
        "description": "case",
        "peekOfCode": "class AlgumaCoisa:\n    def __enter__(self):\n        print(\"Estou entrando\")\n    def __exit__(self, exc_type, exc_val, exec_tb):\n        print(exc_type)\n        print(exc_val)\n        print(exec_tb)\n        print(\"Estou Saindo\")\nwith AlgumaCoisa() as something:\n    # raise Exception(\"Erro ocorreu\")",
        "detail": "case",
        "documentation": {}
    }
]