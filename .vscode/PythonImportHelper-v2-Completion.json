[
    {
        "label": "Engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "kind": 6,
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "peekOfCode": "class DBConnectionHandler:\n    def __init__(self) -> None:\n        self.__connection_string = \"sqlite:///storage.db\"\n        self.__engine = None\n    def connect_to_db(self):\n        self.__engine = create_engine(self.__connection_string)\n    @property\n    def engine(self) -> Engine | None:\n        return self.__engine\ndb_connection_handler = DBConnectionHandler()",
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "db_connection_handler",
        "kind": 5,
        "importPath": "src.models.sqlite.settings.connection",
        "description": "src.models.sqlite.settings.connection",
        "peekOfCode": "db_connection_handler = DBConnectionHandler()",
        "detail": "src.models.sqlite.settings.connection",
        "documentation": {}
    },
    {
        "label": "test_connect_to_db",
        "kind": 2,
        "importPath": "src.models.sqlite.settings.connection_test",
        "description": "src.models.sqlite.settings.connection_test",
        "peekOfCode": "def test_connect_to_db():\n    assert db_connection_handler.engine is None\n    db_connection_handler.connect_to_db()\n    db_engine = db_connection_handler.engine\n    assert db_engine is not None\n    assert isinstance(db_engine, Engine)",
        "detail": "src.models.sqlite.settings.connection_test",
        "documentation": {}
    }
]